package edu.kh.comm.member.controller;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

// POJO 기반 프레임워크 : 외부 라이브러리 상속 X

// class : 객체를 만들기 위한 설계도
// -> 객체로 생성 되어야지 기능 수행 가능하다.
// --> IOC(제어의 역전, 객체 생명주기를 스프링이 관리)를 이용하여 객체 생성
// ** 이 때, 스프링이 생성한 객체를 bean이라고 한다. **

// bean 등록 == 스프링이 객체로 만들어서 가지고 있어라


// @Component // 해당 클래스를 bean으로 등록하라는 프로그램에게 알려주는 주석 (Annotation)

@Controller // 생성된 bean이 Controller임을 명시 + bean 등록 하는 어노테이션
@RequestMapping("/member") // localhost:8080/comm/member 이하의 요청을 처리하는 Controller
//localhost:8080/comm/member
//localhost:8080/comm/member/login
//localhost:8080/comm/member/signUp


public class MemberController {
	
	private Logger logger = LoggerFactory.getLogger(MemberController.class);
	
	

	// Controller : 요청/응답을 제어하는 역할을 하는 클래스
	
	/* @RequestMapping : 클라이언트 요청(url)에 맞는 클래스 or 메서드를 연결 시켜주는 어노테이션
	 *
	 * [ 위치에 따른 해석 ]
	 * - 클래스 레벨 : 공통 주소 
	 * - 메서드 레벨 : 공통 주소 외 나머지 주소 
	 *  
	 * 단, 클래스 레벨에 @RequestMapping이 존재하지 않는다면
	 * - 메서드 레벨 : 단독 요청 처리 주소
	 * 
	 * 
	 * [ 작성법에 따른 해석 ]
	 * 
	 * 1) @RequestMapping("url")
	 * --> 요청 방식(GET/POST) 관계 없이 url이 일치하는 요청 처리
	 * 
	 * 2) @RequestMapping(value = "url", method = RequestMethod.GET | POST)
	 * --> 요청 방식에 따라 요청 처리함
	 * 
	 * ** 메서드 레벨에서 GET/POST 방식을 구분하여 매핑할 경우 **
	 *  @GetMapping("url")  /  @postMapping("url") 상용하는 것이 일반적
	 *  (메서드 레벨에서만 작성 가능!)
	 * 
	 * */
	

	// 로그인
	// 요청시 파라미터를 얻어오는 방법 1
	// HttpServletRequest 이용한다
	
	/*@RequestMapping("/login")
	public String login(HttpServletRequest req) {
		logger.info("로그인 요청됨");
		
		String inputEmail = req.getParameter("inputEmmail");
		String inputPw = req.getParameter("inputPw");
		
		logger.debug("inputEmail: " + inputEmail);
		logger.debug("inputPw: " + inputPw);
		
		
		return "redirect:/"; // sendRedirect 안써도 된다. 이게 리다이렉트 구문임. ( 현재 최상위임)
	}*/
	
	// 요청 시 파라미터를 얻어오는 방법 2
	// -> @RequestParam 어노테이션 사용
	
	// @RequestParam("name속성값") 자료형 변수명
	// - 클라이언트 요청 시 같이 전달된 파라미터를 변수에 저장
	// --> 어떤 파라미터를 변수에 저장할지는 "name속성값"을 이용해 지정
	
	// 매개변수 지정 시 데이터 타입 파싱을 자유롭게 진행할 수 있음 ex) String -> int로 변환
	
	// [속성]
	
	@RequestMapping("/login")
	public String login( @RequestParam("inputEmail") String inputEmail) {
			
		
		return "redirect:/"; // sendRedirect 안써도 된다. 이게 리다이렉트 구문임. ( 현재 최상위임)
	}
	
	
}
